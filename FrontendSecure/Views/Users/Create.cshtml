@model FrontendSecure.Models.CreateUserWithCustomModel

@{
    ViewBag.Title = "Create";
}

<h2></h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4></h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.User.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.User.Email, new { htmlAttributes = new { @class = "form-control", id="validateemail"} })
                <div style="display:none; margin-left: 285px; position: absolute; margin-top: -30px;" id="alertokemail"> <span class="glyphicon glyphicon-ok"></span></div>
                <div style="display:none; margin-left: 285px; position: absolute; margin-top: -30px;" id="alerttakenemail"> <span class="glyphicon glyphicon-remove"></span></div>
                @Html.ValidationMessageFor(model => model.User.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.User.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.User.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.User.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.User.LastName, htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.User.LastName, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.User.LastName, "", new {@class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.User.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.User.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.User.PhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.User.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.User.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.User.Password, "", new { @class = "text-danger" })
            </div>
        </div>
        <input type="hidden" value="@Model.CustomerId" name="CustomerId"/>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Opret" class="btn btn-default" id="submitbtnuser" />
            </div>
        </div>
    </div>
}

<div onclick="showPageLoadingSpinner()">
    @Html.ActionLink("Tilbage", "Details", "Customers", new {id = Model.CustomerId}, null)
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">
    $(document)
        .ready(function() {
            $("#validateemail")
                .on("input",
                    function() {
                        showEmailValid();
                        var email = $("#validateemail").val();
                        if(!isEmail(email))
                            {showEmailInvalid();}

                        var emails = @Html.Raw(Json.Encode(Model.Users));

                        $.each(emails,
                            function(index, mail) {

                                if (email.match(mail)) {
                                    showEmailInvalid();
                                    return;
                                }

                            });
                    });
        });
    function isEmail(email) {
        var regex = new RegExp(/^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/);
        return regex.test(email);
    }

    function showEmailValid() {
        $("#alerttakenemail").hide();
        $("#alertokemail").show();
        $(':input[type="submit"]').prop('disabled', false);
    }
    function showEmailInvalid() {
        $("#alerttakenemail").show();
        $("#alertokemail").hide();
        $(':input[type="submit"]').prop('disabled', true);
    }

</script>
